#include <curl/curl.h> //This fucker took so long to get working.


#include <stdlib.h>
#include <string>
#include <stdio.h>
#include <inttypes.h>

#include <3ds.h>
#include  <regex>
#include <iostream>
#include <sys/socket.h>

#include <regex>

//socket shit_____________
#include <malloc.h>
#include <errno.h>
#include <stdarg.h>
#include <unistd.h>

#include <fcntl.h>

#include <sys/types.h>

#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define SOC_ALIGN       0x1000
#define SOC_BUFFERSIZE  0x100000

#define SCREEN_WIDTH  400
#define SCREEN_HEIGHT 240





	static char mybuf[60]; //url
	static char font

static u32 *SOC_buffer = NULL;
s32 sock = -1, csock = -1;


void failExit(const char *fmt, ...)
{
}

const static char http_200[] = "HTTP/1.1 200 OK\r\n";

const static char indexdata[] = "<html> \
                               <head><title>A test page</title></head> \
                               <body> \
                               This small test page has had %d hits. \
                               </body> \
                               </html>";

const static char http_html_hdr[] = "Content-type: text/html\r\n\r\n";
const static char http_get_index[] = "GET / HTTP/1.1\r\n";




//---------------------------------------------------------------------------------
void socShutdown() {
//---------------------------------------------------------------------------------
	socExit();

}

//________________________________

size_t CurlWrite_CallbackFunc_StdString(void *contents, size_t size, size_t nmemb, std::string *s)
{
    size_t newLength = size*nmemb;

    s->append((char*)contents, newLength);


    return newLength;
}

void pSet(u8* screen, u32 x,u32 y,u8 r,u8 g, u8 b)
{
u32 color = RGB8_to_565(r, g, b);
int idx = (x * 240) + (239 - y);
((u16*)screen)[idx] = (u16)color;
} 

		
gfxInitDefault();
consoleInit(GFX_BOTTOM, NULL);
consoleInit(GFX_TOP, NULL);
u8* bscr = gfxGetFramebuffer(GFX_BOTTOM, GFX_LEFT, NULL, NULL);



using namespace std;

	static char sarr[0x80000]; //page data

int drawScreen()
{
printf("Begin drawing upper screen...");
int xpt = 0;
int ypt = 0;
for (int cps = 0; cps < sizeof(sarr); cps++) {
if(sarr[cps]=10)
{
int pxl = 24*int(sarr[cps]);
for (int x = 0; x < 3; x++) {
for (int y = 0; y< 5; y++) {
if(font[pxl]='1')
{
;
}
pxl++;
}
xpt = xpt+4;
}
}
else
ypt = ypt +6;
xpt = 0;
}
}


int main()
//DON'T PUT SHIT HERE DON'T PUT SHIT HERE DON'T PUT SHIT HERE DON'T PUT SHIT HERE DON'T PUT SHIT HERE DON'T PUT SHIT HERE DON'T PUT SHIT HERE 
//DON'T PUT SHIT HERE DON'T PUT SHIT HERE DON'T PUT SHIT HERE DON'T PUT SHIT HERE DON'T PUT SHIT HERE DON'T PUT SHIT HERE DON'T PUT SHIT HERE 
//DON'T PUT SHIT HERE DON'T PUT SHIT HERE DON'T PUT SHIT HERE DON'T PUT SHIT HERE DON'T PUT SHIT HERE DON'T PUT SHIT HERE DON'T PUT SHIT HERE 
{			
		





	
	int ret;
					
	static u32 *SOC_buffer = NULL;

	// allocate buffer for SOC service
	SOC_buffer = (u32*)memalign(SOC_ALIGN, SOC_BUFFERSIZE);

	if(SOC_buffer == NULL) {
		failExit("memalign: failed to allocate\n");
	}

	// Now intialise soc:u service
	if ((ret = socInit(SOC_buffer, SOC_BUFFERSIZE)) != 0) {
		failExit("socInit: 0x%08X\n", (unsigned int)ret);
	}
	while(1==1) 
	{
		{

				hidScanInput();
			u32 kDown = hidKeysDown();

			if (kDown & KEY_A)
			{	
				static SwkbdState swkbd;

				swkbdInit(&swkbd, SWKBD_TYPE_WESTERN, 1, -1);
				swkbdSetHintText(&swkbd, "Enter a URL.");
				swkbdInputText(&swkbd, mybuf, sizeof(mybuf));




				
				CURL *curl;
				CURLcode res;

				curl_global_init(CURL_GLOBAL_DEFAULT);

				curl = curl_easy_init();
				std::string s;
				if(curl)
				{	
					consoleInit(GFX_TOP, NULL);

					curl_easy_setopt(curl, CURLOPT_URL, mybuf);

					curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L); //only for https
					curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0L); //only for https
					curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, CurlWrite_CallbackFunc_StdString);
					curl_easy_setopt(curl, CURLOPT_WRITEDATA, &s);


					/* Perform the request, res will get the return code */
					res = curl_easy_perform(curl);
					/* Check for errors */
					if(res != CURLE_OK)
					{
						fprintf(stderr, "curl_easy_perform() failed: %s\n",
								curl_easy_strerror(res));
						
					}
					if(res == CURLE_OK)
					{			
						//a
						std::string text = s;
						std::regex r("");
						//r = std::regex("<script.*?>.*?<.*?>");
						//s = std::regex_replace(s, r, "");
						r = std::regex("<.*?>");
						s = std::regex_replace(s, r, "");

//html = html.replace(/<\/div>/ig, '\n');
//html = html.replace(/<\/li>/ig, '\n');
//html = html.replace(/<li>/ig, '   *   ');
//html = html.replace(/<\/ul>/ig, '\n');
//html = html.replace(/<\/p>/ig, '\n');
//html = html.replace(/<br\s*[\/]?>/gi, "\n");
//html = html.replace(/http/ig,"\nhttp");
//html = html.replace(/https/ig,"\nhttps");
//html = html.replace(/<[^>]+>/ig, '');
//html = html.replace(/ â€º /ig, '\/');
//return html;
					   


						strcpy(sarr, s.c_str());
						drawScreen();

					}

					/* always cleanup */
					curl_easy_cleanup(curl);
				}

			}
				if (kDown & KEY_START)
				{
					consoleInit(GFX_TOP, NULL);
					std::cout<< "Goodbye" << std::endl;
					gfxExit();
					socShutdown();
					return 0;

			}
			gspWaitForVBlank();


				}
	
	}
}